####################################################################################################
**验证器基础**
####################################################################################################

******************************************************************************************
**验证器用法**
******************************************************************************************

**说明：** 只要继承了 ``\CAction`` 控制器, 就可以使用 ``getCheckers()`` 方法进行重写验证器实现验证。

**注意：** 父类中该方法返回值是一个 ``数组`` , 只需把任意多个对象实例注入即可。 **验证器验证顺序跟数组索引序列一致** 。

.. code-block:: php
    :linenos:

    <?php
        protected function getCheckers()
        {
            return [
                new IdExistChecker('sponsor','主办人不存在/',\DBUtils::USER), // 验证主办人
                new CoSponsorChecker(['type' => 'task']), // 验证协办人
                new ContentChecker(), // 验证内容
                new LngLatAddrChecker(), // 验证经纬度和地址
            ];
        }
    ?>

.. Tip::  详见本章 **验证器列表** 查看可添加的内置验证器，也可自定义验证器。

******************************************************************************************
**自定义验证器**
******************************************************************************************

除了框架自带的验证器外，可以根据业务场景自定义所需的验证器。

**说明：** 新建验证器类必须实现 ``IParamsChecker`` 及实现 ``onCheck($data, &$msg)`` 方法。验证器拦截只需抛出异常即可, 而最后通过验证需要返回值 ``true`` 。

**参数：** 参数 ``$data`` 是传入的 ``$_GET`` 和 ``$_POST`` 合并后的数组。 参数 ``$msg`` 如果直接抛出异常则并不会用到, 也可以把异常提醒赋值给此参数，然后 ``return false;`` 即可。

**例1：** 自定义 ``ContentChecker`` 用于检查内容, 传入参数 ``content`` 为空则抛出异常。

.. code-block:: php
    :linenos:
    :emphasize-lines: 7-8,11

    <?php
        class ContentChecker implements IParamsChecker
        {
            public function onCheck($data, &$msg)
            {
                if(!$data['content']){
                    $msg = '内容不能为空';
                    return false;
                }else{
                    $data['content'] = strip_tags($data['content']); // 去除 html 标签
                    return true;
                }
            }
        }

    ?>
