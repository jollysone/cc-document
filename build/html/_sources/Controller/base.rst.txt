####################################################################################################
**基本控制器**
####################################################################################################

******************************************************************************************
**控制器基类(CAction)**
******************************************************************************************

**说明：** 如果 **只需简单的处理数据功能** , 可以直接继承 ``\CAction`` 并重写 ``execute(CRequest $request)`` 方法则可以实现一个API。重写后返回值需是一个 ``Response`` 响应, 这部分可参考 ``响应(Response)`` 章节， 一般使用 **CJsonData** 。

**基础模板：** 

.. code-block:: php
    :linenos:
    :emphasize-lines: 2,4,10-12

    <?php
        class ExampleApiAction extends \CAction
        {
            public function execute(CRequest $request)
            {
                ...

                ...
                
                return new CJsonData([
                    'result' => 'success'
                ]);
            }

        }
    ?>


******************************************************************************************
**列表控制器(ListAction)**
******************************************************************************************

**说明：** 如果是一个列表页则可以继承这个方法。一般都会实现接口 ``ITableViewCreator`` 用于创建页面元素。

.. note:: 
    **构建 ListAction 基本的三步：**

    1. 重写获得表名方法确认操作哪个数据表（**getTable()**）。


    2. 重写搜索条件方法, 同时也是配合顶部的搜索项（**getSearchCondition()**）。


    3. 在显示列表前预处理数据（**onListBefore(&$list)**）。


    **页面渲染管理页列表, 还需要实现接口** ``ITableViewCreator`` **的三个方法：**

    1. 创建数据过滤器（**createListFilters()**）。


    2. 创建列表的字段（**createListColumns(array $list)**）。


    3. 创建列表数据条的操作按钮（**createOperateButtons(array $list)**）。


**基础模板：** 

.. code-block:: php
    :linenos:

    <?php
        class ExampleAction extends ListAction implements ITableViewCreator
        {
            protected function getTable()
            {
                return 'table_name';
            }

            protected function getSearchCondition()
            {
                $this->dbCondition->select('t.*');
            }

            protected function onListBefore(&$list)
            {
                return [
                    new ExampleListBeforeAdminHandler(),
                ];
            }



            public function createListFilters()
            {
                $filters[] = new SelectFilter('type', '类型', ['类型1', '类型2']);
               
                return $filters;
            }

            public function createListColumns(array $list)
            {
                $columns[] = new Column('提交人', 'uploader_name');

                return $columns;
            }

            public function createOperateButtons(array $list)
            {
                return [
                    function ($data) {
                        $buttons[] = new OperateButtonWidget('删除','delete');

                        return new ArrayDataWidget($buttons);
                    }
                ];
            }
        }
    ?>



******************************************************************************************
**详情控制器(DetailAction)**
******************************************************************************************

**说明：** 如果是一个详情页则可以继承这个方法。一般都会实现接口 ``IFormViewBuilder`` 用于创建页面元素。

.. note:: 
    **构建 DetailAction 基本的三步：**

    1. 重写获得表名方法确认操作哪个数据表（**getTable()**）。


    2. 重写搜索条件方法（**getSearchCondition()**）。


    3. 在显示列表前预处理数据（**onListBefore(&$list)**）。


    **页面渲染详情页信息, 还需要实现接口** ``IFormViewBuilder`` **的方法：**

    1. 创建渲染详情页信息组件（**createFormInputs()**）。


**基础模板：** 

.. code-block:: php
    :linenos:

    <?php
        class ExampleAction extends DetailAction implements IFormViewBuilder
        {
            protected $isLayout = false;

            protected function getTable()
            {
                return 'table_name';
            }

            protected function getSearchCondition()
            {
                $this->dbCondition->select('t.*');
            }

            protected function onListBefore(&$list)
            {
                return [
                    new ExampleListBeforeAdminHandler(),
                ];
            }


            public function createFormInputs()
            {
                $inputs[] = new TextInput('type', '类型');

                return $inputs;
            }
        }
    ?>

******************************************************************************************
**保存控制器(SaveAction)**
******************************************************************************************

**说明：** 如果是一个编辑页, 一般都会实现接口 ``IFormViewBuilder`` 用于创建页面元素。

.. note:: 
    **构建 DetailAction 基本的三步：**

    1. 定义 ``protected $isLayout = false;`` 关闭显示视图关联，或重写 ``getLayouts()`` 方法。

    .. code-block:: 

        public function getLayouts() {
            return false;
        }

    2. 重写获得表名方法确认操作哪个数据表（**getTable()**）。

    3. 重写过滤只接受哪些参数传递（**getPostNames()**）。

    **构建 DetailAction 可配置项：**

    1. 配置必填项（**getMustNames()**）。

    1. 构建过滤检查器（**getCheckers()**）。

    2. 获取需要回显的数据， 并存到全局变量 ``$data`` 里面（**getDetData(&$list)**）。

    3. 执行保存操作之前处理（**onBeforeSave(&$data)**）。

    4. 执行保存操作之后处理（**onAfterSave($data)**）。

    5. 存储完数据后自动跳转的链接（**getSaveRedirectUrl($data)**）。

    .. code-block:: 

        protected function getSaveRedirectUrl($data) {
            return $this->genurl('save');
        }

    6. 关闭按有 `id` 自动按更新处理，没有则是新增（**getIsExecSave()**）。

    .. code-block:: 

        protected function getIsExecSave()
        {
            return false;
        }


    7. 配置是否是插入（**isAdd()**）。

    .. code-block:: 

        protected function isAdd()
        {
            return true;
        }
    


    **页面渲染详情页信息, 还需要实现接口** ``IFormViewBuilder`` **的方法：**

    1. 创建渲染编辑页信息组件（**createFormInputs()**）。

    **对于修改数据，最好加上事务处理：**

    1. 重写开启事务（**getIsOpenTransaction()**）。


**基础模板：** 

.. code-block:: php
    :linenos:

    <?php
        class ExampleAction extends SaveAction implements IFormViewBuilder
        {
            protected $isLayout = false; // 不显示视图文件
            protected $data = []; // 用于保存回显数据

            protected function getTable()
            {
                return 'table_name';
            }

            protected function getPostNames()
            {
                return "id,title,content"; // 允许传过来的参数字段
            }

            protected function getMustNames()
            {
                return 'title,content'; // 配置必传参数
            }
            
            protected function getCheckers()
            {
                return [
                    new IntChecker(5),
                ];
            }

            protected function onBeforeSave(&$data)
            {    
                return [        
                    new ExampleEditSaveBeforeHandler(),
                ];
            }

            protected function onAfterSave($data)
            {    
                return [        
                    new ExampleEditSaveAfterHandler(),
                ];
            }

            protected function getIsOpenTransaction()
            {
                return true; // 编辑一般都会加上事务处理
            }

           


            public function createFormInputs()
            {
                $inputs[] = new TextInput('type', '类型');

                return $inputs;
            }

            protected function getDetData()
            {
                $id = $this->getId();

                if ($id){
                    $item = ItemModel::make($this->getTable())
                        ->addColumnsCondition(['id' => $id])
                        ->execute();

                    if($item){
                        $this->data = [
                            'id' => $item['id'],
                            'title' => $item['title'],

                            ...

                        ];
                    }else{
                        return $this->data;
                    }
                }else{
                    return $this->data;
                }
            }
        }
    ?>


******************************************************************************************
**删除控制器(DeteleAction)**
******************************************************************************************

**说明：** 默认可以拿到需要删除的 **id** 或其它条件，然后根据 **id** 或其它条件删除具体条目。

.. note:: 
    **构建 DeteleAction 基本的步骤：**

    1. 重写获得表名方法确认操作哪个数据表（**getTable()**）。

    **构建 DeteleAction 可配置项：**

    1. 删除前预处理数据（**beforeAction()**）。

    2. 需删除后处理的（**onAfterDelete(&$data)**）。

    **对于删除数据，最好加上事务处理：**

    1. 重写开启事务（**getIsOpenTransaction()**）。



**基础模板：** 

.. code-block:: php
    :linenos:

    <?php
        class ExampleAction extends DetailAction
        {
            protected function getTable()
            {
                return 'table_name';
            }

            protected function beforeAction()
            {
                return [
                    new ExampleDeleteBeforeAdminHandler(),
                ];
            }

            protected function onAfterDelete(&$data)
            {
                return [
                    new ExampleDeleteBeforeAdminHandler(),
                ];
            }

            protected function getIsOpenTransaction()
            {
                return true; // 删除一般都会加上事务处理
            }
        }
    ?>




.. code-block:: php
    :linenos:

    <?php
       给$list附加新字段

        一对一

        //关联表关联字段默认是id
        AdditionDataListBeforeHandler('关联表名', '本表关联字段', ['新字段名' => '关联表字段']);

        AdditionDataList::instance('关联表名', '本表关联字段', ['新字段名' => '关联表字段'])->additionData($list);
        一对多

        AdditionDataList::instance('关联表名', '关联表关联字段', ['新字段名' => [
            '新字段1' => '关联表字段1', 
            '新字段2' => '关联表字段2'
        ]], true, '本表关联字段(默认是id)')->additionData($list);

        // 例子
        AdditionDataList::instance(
            'schema_data',  'schema_id',
            ['content' => [
                'id' => 'id', 
                'name' => 'val']
            ], true
        )->additionData($schema_list);
    ?>




******************************************************************************************
**其它(Other)**
******************************************************************************************

================================================================================
**执行一个控制器**
================================================================================

.. code-block:: php
    :linenos:

    <?php
        $req = new CRequest();
        $req->putParams('','');

        $action = new CityIndexCaseCmdAction();
        $action->init();

        $ret = $action->execute($req);
        $ret = $ret->getData();
    ?>

================================================================================
**面包屑**
================================================================================

.. code-block:: php
    :linenos:

    <?php
       protected function getBreadcrumbs() {    
            return [        
                ['name' => ''],        
                ['name' => '',  'url' => $this->genurl()]
            ];
        }
    ?>

