####################################################################################################
**模块设计**
####################################################################################################

******************************************************************************************
**各服务器切换设计**
******************************************************************************************

在开发服测试时，需要 ``Debug`` 测试服的数据时，只需在登录时，在URL追加参数 ``&__for_test=1`` 再回到开发服时即可。

******************************************************************************************
**会话认证设计**
******************************************************************************************

尚未完善

******************************************************************************************
**加密设计**
******************************************************************************************

貌似均采用 ``AES`` 加密。尚未完善。

******************************************************************************************
**类属性反射设计**
******************************************************************************************
尚未完善

所有继承 ``CAction`` 控制器的其它控制器, 都可以定义任何 ``类属性`` 来映射 ``Request 参数`` 。

.. note:: A 继承了 ``CAction`` , A 类中有属性 ``id`` , 则如果有 ``Request 参数`` 的传入（包括GET/POST等）, 则此属性会通过参数映射过来, 则此时属性就存储了 ``Request 参数`` 。

******************************************************************************************
**依赖注入设计**
******************************************************************************************

尚未完善

.. code-block:: php
    :linenos:

    <?php
        protected function getCheckers()
        {
            return [
                new EmailChecker('sponsor', 'xxx'), // 验证经纬度和地址
            ];
        }

        $this->dbCondition->addConditions([
            new LikeCondition('search_key', ['t.task_num', 't.address', 't.content']),
        ]);


        public function onBuild($dbCondition, \CRequest $request)
        {
            
        }
    ?>


******************************************************************************************
**数据假删除设计**
******************************************************************************************

需要在表中增加一个字段 ``is_del`` , ``is_del = 1`` 为已删除, ``is_del = 0`` 反之。

.. Tip:: 如需假删除, 需要 字段 ``is_del`` , 否则会导致框架内的某些地方不可用。


******************************************************************************************
**路由分组模块设计**
******************************************************************************************

1. 访问是面向分组的。

2. 分组是可以自定义的, 常见的 **group** 有 ``admin`` , ``api`` , ``cmd`` , ``xbwqLink`` 。

显式地声明某个控制器支持的分组：

.. code-block:: php
    :linenos:

    <?php
        protected function supportGroups() {
            return 'admin,api,cmd,xbwqLink';
        }
    ?>

******************************************************************************************
**公司拦截器分组设计**
******************************************************************************************

调用 ``Model`` 类进行的数据库操作, 都会自动加上当前 ``com_id``

ListAction, SaveAction 帮你写的查询都受 ``com_id`` 拦截器影响。

******************************************************************************************
**URL权限检查器设计**
******************************************************************************************

所有 `URL` 链接访问都会有一个权限检查, 如果是 **组件** 没有权限则不显示该组件，其它方式访问没有权限的 `URL` 则直接抛出异常。

.. Tip:: 这些 `URL` 链接有没有权限访问，取决于 ``protected/biz/auth/UrlsConf.php`` 配置。详细配置可参考 **权限 -> 权限检查器** 模块。

******************************************************************************************
**视图设计**
******************************************************************************************

1. ListAction, SaveAction 默认都是加载布局文件的。

2. SaveAction 用于这样的场景：主键字段叫id的1条数据。

3. 2种数据操作场景：新增数据 和 编辑数据。

4. 如果 ``ListAction`` 的 ``getIsSingle()`` 返回 ``true`` , 视图文件可以直接使用数据库字段名所对应的变量名。